#+TITLE: Lambda Calculus Exercises
#+AUTHOR: Jesse Evers

* Comprehension Check

1. How would the following functions have to be changed to be used in the REPL?
  
  =half x = x / 2= \rarr =let half x = x / 2=
  =square x = x * x= \rarr =let square x = x * x=

  Basically, you have to add =let= before function definitions in the REPL.

2. Write a function that takes one parameter and works for all the following expressions. Be sure to name the function.

   #+begin_src haskell
     -- Expressions to match:
     -- 3.14 * (5 * 5)
     -- 3.14 * (10 * 10)
     -- 3.14 * (2 * 2)
     -- 3.14 * (4 * 4)

     circleArea r = 3.14 * (r * r)
   #+end_src

   #+RESULTS:

3. Rewrite the above function to use Prelude's =pi= instead of =3.14=.

   #+begin_src haskell :results output
     circleArea r = pi * (r * r)
   #+end_src

* Parentheses and Association

Do the parentheses change the results of the function?

1. =8 + 7 * 9= vs =(8 + 7) * 9=

   The parentheses change the output because of normal arithmetic order of operations. Without the parentheses, the result is =71=, and with them it's =135=.

2. =perimeter x y = (x * 2) + (y * 2)= vs =perimeter x y = x * 2 + y * 2=

   No change, because the parentheses enforce normal order of operations. Multiplication comes before addition. They definitely make it clearer, though.

3. =f x = x / 2 + 9= vs =f x = x / (2 + 9)=

   The parentheses cause =x= to be divided by 11, rather than having half of =x= added to 9.

* Heal the Sick

Find the mistakes in the following non-running code samples:

1. 
   #+begin_src haskell :results output
     -- Incorrect (extra space between `3.` and `14`):
     let area x = 3. 14 * (x * x)
     -- Correct:
     let area x = 3.14 * (x * x)
   #+end_src

2. 
   #+begin_src haskell :results output
     -- Incorrect (free variable `b` should be parameter `x`):
     let double x = b * 2
     -- Correct:
     let double x = x * 2
   #+end_src

3. 
   #+begin_src haskell :results output
     -- Incorrect:
     x = 7
      y = 10
     f = x + y

     -- Correct (extra space before `y` assignment removed):
     x = 7
     y = 10
     f = x + y
   #+end_src

* A Head Code

1. =let x = 5 in x=
   \rarr 5
2. =let x = 5 in x * x=
   \rarr 25
3. =let x = 5; y = 6 in x * y=
   \rarr 30
4. =let x = 3; y = 1000 in x + 3=
   \rarr 6

Rewrite with =where= clauses: see =./examples/LetToWhere.hs=.


* Chapter Exercises
** Parenthesization
Parenthesize the expressions in a way that makes them more explicit without changing their results.

1. 2 + 2 * 3 - 3
   \rarr 2 + (2 * 3) - 3

2. (^) 10 $ 1 + 1
   \rarr (^) 10 (1 + 1) or 10 ^ (1 + 1)

3. 2 ^ 2 * 4 ^ 5 + 1
   \rarr ((2 ^ 2) * (4 ^ 5)) + 1

** Equivalent expressions
Which of the following pairs will return the same result when evaluated?

1. =1 + 1= and =2=
   \rarr Yes
2. =10 ^ 2= and =10 + 9 * 10=
   \rarr Yes, both evaluate to 100.
3. =400 - 37= and =(-) 37 400=
   \rarr No, the second expression is equivalent to =37 - 400=, not =400 - 37=.
4. =100 `div` 3= and =100 / 3=
   \rarr No, because =div= does integer division. The first expression evaluates to 33 and the second to 33.33...
5. =2 * 5 + 18= and =2 * (5 + 18)=
   \rarr No, the parentheses change the order of evaluation. The first evaluates to 28 and teh second to 46.

** More fun with functions

#+begin_src haskell
  -- Original
  z = 7
  x = y ^ 2
  waxOn = x * 5
  y = z + 8

  -- For REPL
  let z = 7
  let y = z + 8
  let x = y ^ 2
  let waxOn = x * 5

  -- or

  let z = 7
      y = z + 8
      x = y ^ 2
  in x * 5
#+end_src

In the REPL...

1. 
   =10 + waxOn= is 1135
   =(+10) waxOn= is 1135
   =(-) 15 waxOn= is -1110
   =(-) waxOn 15= is 1110

2. ...

3. =triple waxOn= is 3375.

4. 


