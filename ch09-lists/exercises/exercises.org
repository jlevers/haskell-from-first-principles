#+TITLE: Chapter 9
#+AUTHOR: Jesse Evers

* Comprehend thy lists
1.
   #+begin_src haskell
     [x | x <- mySqr, rem x 2 == 0]

     -- [4, 16, 36, 64, 100]
   #+end_src

2.
   #+begin_src haskell
     [(x, y) | x <- mySqr
               y <- mySqr
               x < 50, y > 50]

     -- [(1, 64), (1, 81), (1, 100), (2, 64)...(49, 64), (49, 81), (49, 100)]
   #+end_src

3.
   #+begin_src haskell
     take 5 [ (x, y) | x < mySqr,
                       y < mySqr,
                       x < 50, y > 50 ]

     -- [(1, 64), (1, 81), (1, 100), (4, 64), (4, 81)]
   #+end_src


* Square cube
Given:
#+begin_src haskell
  mySqr = [x^2 | x <- [1..5]]
  myCube = [y^3 | y <- [1..5]]
#+end_src

1. =[(x, y) | x <- mySqr, y <- myCube]=

2. =[(x, y) | x <- mySqr, y <- myCube, x < 50 && y < 50]=

3. =length [(x, y) | x <- mySqr, y <- myCube, x < 50 && y < 50]=


* Bottom maddness
** Will it blow up?
1. =[x^y | x <- [1..5], y <- [2, undefined]]= will return a value, because =x^y= doesn't get evaluated until something tries to access a list value.
   This is only true if the expression is assigned to a variable. If it's put straight in GHCI, it'll blow up when the interpreter attempts to print it.
2. =take 1 $ [x^y | x <- [1..5], y <- [2, undefined]]= will be \perp, because the first element of the list will be evaluated.
   Wrong. The first element of the returned list is =(1, 2)=, which is perfectly valid, so it'll return that value without evaluating the rest of the list.
3. =sum [1, undefined, 3]= is \perp, because =sum= traverses the spine and the values in order to sum them.
4. =length [1, 2, undefined]= is =3=, because =length= only checks the number of cons cells, not their contents, so \perp value does not cause an error.
5. =length $ [1, 2, 3] ++ undefined= is =4= for the same reason as #4.
   Wrong. The =(++)= operator expects valid lists on both sides, and it will be evaluated before =length= because of the =$= operator.
6. =take 1 $ filter even [1, 2, 3, undefined]= is =[2]=, because the list will only be filtered as far as required.
7. =take 1 $ filter even [1, 3, undefined]= is \perp, because the whole list will be filtered in search of an even value.
8. =take 1 $ filter odd [1, 3, undefined]= is =[1]=, because the list will only be filtered up to the first matching element.
9. =take 2 $ filter ood [1, 3, undefined]= is =[1, 3]=, because the list will only be filtered up to the second matching element.
10. =take 3 $ filter odd [1, 3, undefined]= is \perp, because all 3 elements in the list will be filtered.

** Is it in normal form?
1. Normal form
2. Weak head normal form
3. Neither
4. Neither
5. Neither
6. Weak head normal form
7. Weak head normal form

* More bottoms
1. \perp
2. =2=
3. \perp
4. The function =itIsMystery xs = map (\x-> elem x "aeiou") xs= maps over a string and returns a list that has =True= when the corresponding character was a vowel, and false otherwise.
5. 
   1. =[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]=
   2. =[1, 10, 20]=
   3. =[15, 15, 15]=
6. =map (\x -> (bool id negate (x == 3)) x) [1..10]=
